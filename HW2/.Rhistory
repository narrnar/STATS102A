factors <- c(factors, i)
x <- x / i
} else {
i <- i +2
}
}
}
}
if (x != 1) {
factors <- c(factors, x)
}
factors
}
print(prime_factor(171))
## Part 2
prime_factor <- function(x) {
# Validate input x
if (x <= 2 || !is.numeric(x) || x != as.integer(x) || x %% 1 != 0) {
stop("Invalid value!")
}
# Initializers
factors <- numeric(0)
div <- 2
# Check for prime w/o built-in is.prime() - starting with 2
while (x > 1) {
while (x %% div == 0) {
# Add to vector of prime factors
factors <- c(factors, div)
# Divide x by current factor
x <- x / div
}
# Find next prime factor
div <- div + 1
}
# Output resulting prime factors
factors
}
print(prime_factor(171))
print(prime_factor(364))
for(x in c(2:50, 2001:2050)){
factors <- prime_factor(x)
cat(x, "has prime factors:", factors, "\n")
if(!all(sapply(factors, is_prime))){
cat("Problem: not all factors found are prime.\n")
}
if(prod(factors) != x){
cat("Problem: the product of factors does not equal x.\n")
}
}
## Part 2
prime_factor <- function(x) {
# Validate input x
if (x <= 2 || !is.numeric(x) || x != as.integer(x)) {
stop("Invalid value!")
}
# Initializers
factors <- numeric(0)
div <- 2
# Check for prime w/o built-in is.prime() - starting with 2
while (x > 1) {
while (x %% div == 0) {
# Add to vector of prime factors
factors <- c(factors, div)
# Divide x by current factor
x <- x / div
}
# Find next prime factor
div <- div + 1
}
# Output resulting prime factors
factors
}
print(prime_factor(171))
print(prime_factor(364))
for(x in c(2:50, 2001:2050)){
factors <- prime_factor(x)
cat(x, "has prime factors:", factors, "\n")
if(!all(sapply(factors, is_prime))){
cat("Problem: not all factors found are prime.\n")
}
if(prod(factors) != x){
cat("Problem: the product of factors does not equal x.\n")
}
}
prime_factor(1)
prime_factor(2)
prime_factor(3)
prime_factor(4)
prime_factor(5)
for (i in 2:50) {
prime_factor(i)
}
## Part 2
prime_factor <- function(x) {
# Validate input x
if (x < 2 || !is.numeric(x) || x != as.integer(x)) {
stop("Invalid value!")
}
# Initializers
factors <- numeric(0)
div <- 2
# Check for prime w/o built-in is.prime() - starting with 2
while (x > 1) {
while (x %% div == 0) {
# Add to vector of prime factors
factors <- c(factors, div)
# Divide x by current factor
x <- x / div
}
# Find next prime factor
div <- div + 1
}
# Output resulting prime factors
factors
}
for (i in 2:50) {
prime_factor(i)
}
prime_factor(2)
## Part 2
prime_factor <- function(x) {
# Validate input x
if (x < 2 || !is.numeric(x) || x != as.integer(x)) {
stop("Invalid value!")
}
# Initializers
factors <- numeric(0)
div <- 2
# Check for prime w/o built-in is.prime() - starting with 2
while (x > 1) {
while (x %% div == 0) {
# Add to vector of prime factors
factors <- c(factors, div)
# Divide x by current factor
x <- x / div
}
# Find next prime factor
div <- div + 1
}
# Output resulting prime factors
factors
}
print(prime_factor(171))
print(prime_factor(364))
for(x in c(2:50, 2001:2050)){
factors <- prime_factor(x)
cat(x, "has prime factors:", factors, "\n")
if(!all(sapply(factors, is_prime))){
cat("Problem: not all factors found are prime.\n")
}
if(prod(factors) != x){
cat("Problem: the product of factors does not equal x.\n")
}
}
for (i in 2:50) {
prime_factor(i)
}
## Part 2
prime_factor <- function(x) {
# Validate input x
if (x < 2 || !is.numeric(x) || x != as.integer(x)) {
stop("Invalid value!")
}
# Initializers
factors <- numeric(0)
div <- 2
# Check for prime w/o built-in is.prime() - starting with 2
while (x > 1) {
while (x %% div == 0) {
# Add to vector of prime factors
factors <- c(factors, div)
# Divide x by current factor
x <- x / div
}
# Find next prime factor
div <- div + 1
}
# Output resulting prime factors
factors
}
print(prime_factor(171))
print(prime_factor(364))
source("102A_hw_01_script_Daren_Sathasivam.R")  # edit with your file name
## Part 1
by_type <- function(x, sort = FALSE) {
int_vec <- numeric(0)
double_vec <- double(0)
char_vec <- character(0)
na_vec <- c()
for (idx in x) {
suppressWarnings(int_val <- as.integer(idx))
suppressWarnings(double_val <- as.numeric(idx))
suppressWarnings(char_val <- as.character(idx))
# idx <- grepl(",", "", idx)
# int_val <- as.integer(idx)
# double_val <- as.numeric(idx)
# char_val <- as.character(idx)
# If valid integer, concatenate onto integer vector -- vice versa for other types
if (is.na(idx)) {
na_vec <- c(na_vec, idx)
} else if (!is.na(int_val) && int_val == double_val && !is.na(char_val)) {
int_vec <- c(int_vec, int_val)
} else if (!is.na(double_val)) {
double_vec <- c(double_vec, double_val)
} else {
char_vec <- c(char_vec, char_val)
}
}
# If sort arg is TRUE, sort each list component
if (sort) {
int_vec <- sort(int_vec)
double_vec <- sort(double_vec)
char_vec <- sort(char_vec)
}
# Create output list with the three specified types
out <- list(integers = int_vec, doubles = double_vec, character = char_vec)
out
}
## Part 2
prime_factor <- function(x) {
# Validate input x
if (x < 2 || !is.numeric(x) || x != as.integer(x)) {
stop("Invalid value!")
}
# Initializers
factors <- numeric(0)
div <- 2
# Check for prime w/o built-in is.prime() - starting with 2
while (x > 1) {
while (x %% div == 0) {
# Add to vector of prime factors
factors <- c(factors, div)
# Divide x by current factor
x <- x / div
}
# Find next prime factor
div <- div + 1
}
# Output resulting prime factors
factors
}
## Part 3
# read.table("month_names.txt", sep = "\t", header = TRUE)
month_names <- read.delim("month_names.txt", encoding = "UTF-8", row.names = 1)
month_convert <- function(x, from_lang, to_lang) {
# Initializer
translated <- character(length(x))
# Validate input language
if (!(from_lang %in% rownames(month_names)) || !(to_lang %in% rownames(month_names))) {
if (!(from_lang %in% rownames(month_names))) {
stop("Invalid language name to convert from!")
} else {
stop("Invalid language name to convert to!")
}
stop("Invalid languages!")
}
# Iterate through each element in x arg
for (i in seq_along(x)) {
# Find from_lang corresponding numeric month
month_idx <- which(month_names[from_lang, ] == as.character(x[i]))
if (length(month_idx) == 1) {
# Get number and then find to_lang corresponding name to number
translated[i] <- as.character(month_names[to_lang, month_idx])
} else {
translated[i] <- NA
}
}
translated <- factor(translated)
translated
}
source("102A_hw_01_script_Daren_Sathasivam.R")  # edit with your file name
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
# 10 * 0.3 is 3. There are two instances of 3
# Both instances of 3 will be classified as an integer.
set.seed(1)
x <- sample(c(1:10, (1:10)*0.3, letters[1:10]))
by_type(x)
by_type(x, sort = TRUE)
x <- 10:1
by_type(x, sort = TRUE)
x <- logical(5)
by_type(x)
# values 1.0, 2.0, 3.0, etc. are classified as integers.
x <- seq(0, 4, by = 0.2)
by_type(x)
x <- c(seq(0, 4, by = 0.2), NA, "a", "d")
by_type(x, sort = TRUE)
x <- c(seq(0, 4, by = 0.2), NA, "a", "d")
by_type(x, sort = TRUE)
# Part 2: Tests for `prime_factor()`
This section will print out a bunch of test cases to see if your `prime_factor()` function is working properly. Do not edit the following code which runs tests.
```{r, error = TRUE}
# a helper function for testing if a value x is prime.
is_prime <- function(x){
if(!is.numeric(x)){
stop("Input must be numeric")
}
if(length(x) != 1){
stop("Input must have length of 1")
}
if(as.integer(x) != x){ # non-integer values are not prime
return(FALSE)
}
if(x <= 1){ # negative numbers, 0, and 1 are all non-prime
return(FALSE)
}
if(x == 2){ # special case for 2
return(TRUE)
}
# we only need to check for prime factors less than sqrt(x)
max <- ceiling(sqrt(x))
for(i in 2:max){
if(x %% i == 0){ # if the values divides evenly, it is not prime
return(FALSE)
}
}
TRUE
}
# a helper function for testing if a value x is prime.
is_prime <- function(x){
if(!is.numeric(x)){
stop("Input must be numeric")
}
if(length(x) != 1){
stop("Input must have length of 1")
}
if(as.integer(x) != x){ # non-integer values are not prime
return(FALSE)
}
if(x <= 1){ # negative numbers, 0, and 1 are all non-prime
return(FALSE)
}
if(x == 2){ # special case for 2
return(TRUE)
}
# we only need to check for prime factors less than sqrt(x)
max <- ceiling(sqrt(x))
for(i in 2:max){
if(x %% i == 0){ # if the values divides evenly, it is not prime
return(FALSE)
}
}
TRUE
}
```{r, error = TRUE}
prime_factor(0)
prime_factor(1)
prime_factor(2.2)
for(x in c(2:50, 2001:2050)){
factors <- prime_factor(x)
cat(x, "has prime factors:", factors, "\n")
if(!all(sapply(factors, is_prime))){
cat("Problem: not all factors found are prime.\n")
}
if(prod(factors) != x){
cat("Problem: the product of factors does not equal x.\n")
}
}
month_names <- read.delim("month_names.txt", encoding="UTF-8", row.names=1)
x <- factor(c("March", "March", "February", "June"))
month_convert(x, "English", "Spanish")
x <- factor(c("March", "March", "February", "June", "Jaly", "Hamburger", "December"))
month_convert(x, "English", "German")
x <- factor(c("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio",
"agosto", "settembre", "ottobre", "novembre", "dicembre"))
month_convert(x, "Italian", "English")
x <- factor(c("janeiro", "março", "abril", "maio", "junho", "julho", "maio", "setembro",
"outubro", "novembro", "dezembro", "setembro", "setembro", "março"))
y <- month_convert(x, "Portuguese", "French")
print(y)
y <- month_convert(y, "French", "Danish")
print(y)
y <- month_convert(y, "Danish", "Dutch")
print(y)
y <- month_convert(y, "Dutch", "Icelandic")
print(y)
getwd()
setwd("/Users/darensivam/Desktop/UCLA/Year 3/Spring 2024/STATS_102A/HW2")
# FALSE
## --- Exclusive Or --- ##
# xor() indicates elementwise exclusive OR
x <- c(TRUE, TRUE, FALSE, FALSE, NA, NA, NA)
# FALSE
## --- Exclusive Or --- ##
# xor() indicates elementwise exclusive OR
x <- c(TRUE, TRUE, FALSE, FALSE, NA, NA, NA)
y <- c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, NA)
xor(x, y)
## --- any() and all() --- ##
u <- c(TRUE, TRUE, TRUE)
c(any(u), all(u))
v <- c(TRUE, TRUE, FALSE)
c(any(v), all(v))
getwd()
# download dataset
# https://gattonweb.uky.edu/sheather/book/data_sets.php
playbill <- read.csv("/Users/darensivam/Desktop/UCLA/Year 3/Spring 2024/STATS_101A/Disc/playbill.csv")
# download dataset
# https://gattonweb.uky.edu/sheather/book/data_sets.php
playbill <- read.csv("/Users/darensivam/Desktop/UCLA/Year 3/Spring 2024/STATS 101A/Disc/playbill.csv")
# download dataset
# https://gattonweb.uky.edu/sheather/book/data_sets.php
playbill <- read.csv("/Users/darensivam/Desktop/UCLA/Year 3/Spring 2024/STATS 101A/Disc/playbill.csv")
dim(playbill)
head(playbill)
plot(playbill$CurrentWeek~playbill$LastWeek)
# using equation from prof's slides
c <- (playbill$LastWeek-mean(playbill$LastWeek))/sum((playbill$LastWeek-mean(playbill$LastWeek))^2)
b1_est1 <- sum(c*playbill$CurrentWeek)
# using covariance and variance quantities
b1_est2 <- cov(playbill$CurrentWeek, playbill$LastWeek)/var(playbill$LastWeek)
# using lm()
m1 <- lm(CurrentWeek~LastWeek, data=playbill)
# compare estimates
b1_est1
b1_est2
m1$coefficients[2]
# estimate intercept b0
b0_est <- mean(playbill$CurrentWeek) - b1_est1*mean(playbill$LastWeek)
b0_est
m1$coefficients[1]
# plot original data with linear model
plot(playbill$CurrentWeek~playbill$LastWeek, main="Actual Values & Linear Model")
abline(m1, col='red')
# plot predicted values vs actual values
plot(predict(m1), playbill$CurrentWeek,
xlab = "Predicted Values",
ylab = "Observed Values", main="Actual Values vs Fitted Values")
abline(a = 0, b = 1, lwd=2,
col = "red")
# obtain residuals
pred_y <- b0_est + b1_est1 * playbill$LastWeek
residuals_y <- pred_y - playbill$CurrentWeek
# side note- plot residuals
plot(residuals_y~pred_y, main="Residuals vs Fitted Values")
abline(a = 0, b = 0, col = "red")
plot(m1, which=1)
# estimate se of b1
sample_var <- (1/(nrow(playbill)-2)) * sum(residuals_y^2)
sxx <- sum((playbill$LastWeek-mean(playbill$LastWeek))^2)
se_b1 <- sqrt(sample_var)/sqrt(sxx)
se_b1
# calculate confidence interval
b1_est1 + c(-1,1) * qt(p=0.025, df=nrow(playbill)-2) * se_b1
# OR extract CI from model object
confint(m1, level = 0.95)[2,]
# plot predicted values vs actual values
plot(predict(m1), playbill$CurrentWeek,
xlab = "Predicted Values",
ylab = "Observed Values", main="Actual Values vs Fitted Values")
abline(a = 0, b = 1, lwd=2,
col = "red")
summary(playbill)
summary(m1)
# alternatively, interpret 95% CI results in summary
confint(m1)["(Intercept)", ]
# predict using our estimated coefficients
pred_val <- b0_est + b1_est1*400000
# build confidence interval
# NOTE: using se for the mean Y value- i.e. for the mean response that the line of best fit goes through
se_pred <- sqrt(sample_var) * sqrt(1 + (1/nrow(playbill)) + ((400000-mean(playbill$LastWeek))^2)/sxx)
pred_val + c(-1, 1) * qt(p=0.025, df=nrow(playbill)-2) * se_pred
# or use model
newdat <- data.frame(LastWeek = (400000))
predict.lm(m1, newdat, interval = "confidence", level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
Weight <- c(105, 140, 185, 145, 120)
Height <- c(60, 66, 72, 70, 62)
model <- lm(Weight ~ Height)
model
summary(model)
new.data <- data.frame(Height = 71)
new.data <- data.frame(Height = c(71, 81))
predict(model, new.data)
predict(model, new.data, interval = 'confidence')
predict()
predict(model, new.data, interval = 'prediction')
# Plot the confidence interval and prediction interval
newx <- seq(min(Height), max(Height), length.out = 100)
new.data <- data.frame(Height = newx)
new.data
# Plot the confidence interval and prediction interval
newx <- seq(min(Height), max(Height), length.out = 100)
new.data <- data.frame(Height = newx)
new.data
conf <- prediction(model, new.data, interval = 'confidence')
conf <- predict(model, new.data, interval = 'confidence')
# Plot the confidence interval and prediction interval
newx <- seq(min(Height), max(Height), length.out = 100)
new.data <- data.frame(Height = newx)
conf <- predict(model, new.data, interval = 'confidence')
pred <- predict(model, new.data, interval = 'prediction')
plot(Height, Weight, xlim = c(min(Height), max(Height)))
Weight <- c(105, 140, 185, 145, 120)
Height <- c(60, 66, 72, 70, 62)
model <- lm(Weight ~ Height)
summary(model)
new.data <- data.frame(Height = 71)
new.data <- data.frame(Height = c(71, 81))
predict(model, new.data)
predict(model, new.data, interval = 'confidence')
predict(model, new.data, interval = 'prediction')
# Plot the confidence interval and prediction interval
newx <- seq(min(Height), max(Height), length.out = 100)
new.data <- data.frame(Height = newx)
conf <- predict(model, new.data, interval = 'confidence')
pred <- predict(model, new.data, interval = 'prediction')
plot(Height, Weight, xlim = c(min(Height), max(Height)))
plot(Height, Weight, xlim = c(min(Height), max(Height)))
lines(newx, conf[, 3], lty = 'dashed', col = 'blue')
lines(newx, conf[, 2], lty = 'dashed', col = 'blue')
